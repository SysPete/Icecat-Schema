#!/usr/bin/env perl

use warnings;
use strict;
use lib 'lib';

use DateTime;
use Icecat::Schema;
use XML::Twig;

use DDP;

my $schema = Icecat::Schema->connect("ICECAT");

my %parents;

#<<<
my @configs = (
    {
        file => "xml/LanguageList.xml",
        handlers => {
            Language => \&language,
        },
    },
    {
        file => "xml/LanguageList.xml",
        handlers => {
            Language => \&language_names,
        },
    },
    {
        file => "xml/MeasuresList.xml",
        handlers => {
            Measure => \&measure,
        },
    },
    {
        file => "xml/FeaturesList.xml",
        handlers => {
            Feature => \&feature,
        },
    },
    {
        file => "xml/CategoriesList.xml",
        handlers => {
            Category => \&category,
        },
        parent => 'pcatid',
        class => 'Category',
    },
    {
        file => "xml/SuppliersList.xml",
        handlers => {
            Supplier => \&supplier,
        },
    },
    {
        file => "xml/FeatureGroupsList.xml",
        handlers => {
            FeatureGroup => \&feature_group,
        },
    },
    {
        file => "xml/FeatureLogosList.xml",
        handlers => {
            FeatureLogo => \&feature_logo,
        },
    },
    {
        file => "xml/CategoryFeaturesList.xml",
        handlers => {
            Category => \&category_feature,
        },
    },
    {
        file     => "xml/SupplierProductFamiliesListRequest.xml",
        handlers => {
            ProductFamily => \&product_family,
        },
        parent => "parent_family_id",
        class  => "ProductFamily",
    },
    {
        file => "xml/files.index.xml",
        handlers => {
            file => \&file,
        },
    },
);
#>>>

foreach my $config (@configs) {

    print "Processing ", $config->{file}, "\n";

    $schema->txn_do(
        sub {
            %parents = () if $config->{parent};

            my $twig = XML::Twig->new( twig_handlers => $config->{handlers} );

            $twig->parsefile( $config->{file} );

            if ( $config->{parent} ) {
                while ( my ( $child, $parent ) = each %parents ) {
                    $schema->resultset( $config->{class} )->find($child)
                      ->update( { $config->{parent} => $parent } );
                }
            }
        }
    );
}

# quick sid/tid ID creation

sub sid {
    $schema->resultset('SidIndex')->create( { dummy => undef } )->id;
}

sub tid {
    $schema->resultset('TidIndex')->create( { dummy => undef } )->id;
}

# Twig handlers

sub category {
    my ( $t, $elt ) = @_;

    # we ignore VirtualCategory (for now)

    my %attrs = %{ $elt->atts };

    # drop top-level category ID 1
    my $catid = $attrs{ID};

    my $category = $schema->resultset('Category')->create(
        {
            catid      => $catid,
            ucatid     => $attrs{UNCATID},
            sid        => sid(),
            tid        => tid(),
            searchable => $attrs{Searchable},
            low_pic    => $attrs{LowPic},
            thumb_pic  => $attrs{ThumbPic},
            visible    => $attrs{Visible},
        }
    );

    if ( $catid ne "1" ) {

        # stash parent catid (always do this if catid is not 1)

        if ( my $elt = $elt->first_child('ParentCategory') ) {
            $parents{$catid} = $elt->att('ID');
        }
    }

    foreach my $elt ( $elt->children('Description') ) {
        my %attrs = %{ $elt->atts };
        next unless $attrs{Value};

        $schema->resultset('Tex')->create(
            {
                tex_id => $attrs{ID},
                tid    => $category->tid,
                value  => $attrs{Value},
                langid => $attrs{langid}
            }
        );
    }

    foreach my $elt ( $elt->children('Keywords') ) {
        my %attrs = %{ $elt->atts };
        next unless $attrs{Value};

        $schema->resultset('CategoryKeyword')->create(
            {
                category_id => $category->id,
                langid   => $attrs{langid},
                keywords => $attrs{Value},
                id       => $attrs{ID},
            }
        );
    }

    foreach my $elt ( $elt->children('Name') ) {
        my %attrs = %{ $elt->atts };
        next unless $attrs{Value};

        $schema->resultset('Vocabulary')->create(
            {
                record_id => $attrs{ID},
                sid       => $category->sid,
                langid    => $attrs{langid},
                value     => $attrs{Value}
            }
        );
    }

    $t->purge;
}

sub category_feature {
    my ( $t, $elt ) = @_;

    my $catid = $elt->att('ID');

    foreach my $elt ( $elt->children('CategoryFeatureGroup') ) {

        # some are empty
        next unless $elt->att('ID');

        $schema->resultset('CategoryFeatureGroup')->create(
            {
                category_feature_group_id => $elt->att('ID'),
                catid                     => $catid,
                feature_group_id =>
                  $elt->first_child('FeatureGroup')->att('ID'),
                no => $elt->att('No'),
            }
        );
    }

    foreach my $elt ( $elt->children('Feature') ) {

        # missing: Class, LimitDirection, Type, ValueSorting

        $schema->resultset('CategoryFeature')->create(
            {
                category_feature_id => $elt->att('CategoryFeature_ID'),
                feature_id          => $elt->att('ID'),
                catid               => $catid,
                no                  => $elt->att('No'),
                searchable          => $elt->att('Searchable'),
                category_feature_group_id =>
                  $elt->att('CategoryFeatureGroup_ID'),
                restricted_search_values =>
                  join( ",", $elt->children_trimmed_text('RestrictedValue') ),
                use_dropdown_input => $elt->att('Use_Dropdown_Input'),
                mandatory          => $elt->att('Mandatory'),
            }
        );

    }

    $t->purge;
}

sub feature {
    my ( $t, $elt ) = @_;

    my $measure_id =
        $elt->first_child('Measure')
      ? $elt->first_child('Measure')->att('ID')
      : undef;

    my $feature = $schema->resultset('Feature')->create(
        {
            feature_id => $elt->att('ID'),
            sid        => sid(),
            tid        => tid(),
            class      => $elt->att('Class'),
            type       => $elt->att('Type'),
            measure_id => $measure_id,
            restricted_values =>
              join( ',', $elt->children_trimmed_text('RestrictedValues') ),

        }
    );

    foreach my $elt ( $elt->descendants('Description') ) {

        next unless my $value = $elt->trimmed_text;

        $schema->resultset('Tex')->create(
            {
                tex_id => $elt->att('ID'),
                tid    => $feature->tid,
                langid => $elt->att('langid'),
                value  => $value,
            }
        );
    }

    foreach my $elt ( $elt->descendants('Name') ) {

        next unless my $value = $elt->trimmed_text;

        $schema->resultset('Vocabulary')->create(
            {
                record_id => $elt->att('ID'),
                sid       => $feature->sid,
                langid    => $elt->att('langid'),
                value     => $value,
            }
        );
    }

    $t->purge;
}

sub feature_group {
    my ( $t, $elt ) = @_;

    my $sid = sid();

    my $feature_group = $schema->resultset('FeatureGroup')->create(
        {
            feature_group_id => $elt->att('ID'),
            sid              => $sid,
        }
    );

    foreach my $elt ( $elt->children('Name') ) {
        $schema->resultset('Vocabulary')->create(
            {
                record_id => $elt->att('ID'),
                langid    => $elt->att('langid'),
                value     => $elt->att('Value'),
                sid       => $sid,
            }
        ) if $elt->att('Value');
    }

    $t->purge;
}

sub feature_logo {
    my ( $t, $elt ) = @_;

    my @FeatureLogoValues = $elt->descendants('FeatureLogoValue');

    my $values = join ",", map { $_->trimmed_text } @FeatureLogoValues;

    my $feature_logo = $schema->resultset('FeatureLogo')->create(
        {
            feature_id => $elt->att('Feature_ID'),
            values     => $values,
            link       => $elt->att('LogoPic'),
            height     => $elt->att('Height'),
            width      => $elt->att('Width'),
            size       => $elt->att('Size'),
        }
    );

    while ( my $elt = $elt->descendants('FeatureLogoCategory') ) {
        $schema->resultset('FeatureLogoCategory')->create(
            {
                feature_logo_id => $feature_logo->id,
                category_id     => $elt->att('catid'),
            }
        );
    }

    $t->purge;
}

sub file {
    my ( $t, $elt ) = @_;

    my ( $updated, $date_added );

    if ( $elt->att('Updated') =~ /^(\d\d\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)$/ )
    {
        $updated = DateTime->new(
            year   => $1,
            month  => $2,
            day    => $3,
            hour   => $4,
            minute => $5,
            second => $6
        );
    }

    if ( $elt->att('Date_Added') =~ /^(\d\d\d\d)(\d\d)(\d\d)/ ) {
        $date_added = DateTime->new(
            year  => $1,
            month => $2,
            day   => $3,
        );
    }

    # not stored: Product_View, Country_Markets, EAN_UPCS, M_Prod_ID
    $schema->resultset('Product')->create(
        {
            product_id      => $elt->att('Product_ID'),
            supplier_id     => $elt->att('Supplier_id'),
            prod_id         => $elt->att('Prod_ID'),
            catid           => $elt->att('Catid'),
            name            => $elt->att('Model_Name'),
            high_pic        => $elt->att('HighPic'),
            updated         => $updated,
            date_added      => $date_added,
            high_pic_size   => $elt->att('HighPicSize'),
            high_pic_width  => $elt->att('HighPicWidth'),
            high_pic_height => $elt->att('HighPicHeight'),
            quality         => $elt->att('Quality'),
            on_market       => $elt->att('On_Market'),
        }
    );

    $t->purge;
}

sub language {
    my ( $t, $elt ) = @_;

    # we ignore Countries (for now)

    my $language = $schema->resultset('Language')->create(
        {
            langid     => $elt->att('ID'),
            sid        => sid(),
            code       => $elt->att('Code'),
            short_code => $elt->att('ShortCode'),
        }
    );

    $t->purge;
}

sub language_names {
    my ( $t, $elt ) = @_;

    my %attrs = %{ $elt->atts };

    die
      unless my $language =
      $schema->resultset('Language')->find( $elt->att('ID') );

    foreach my $elt ( $elt->children('Name') ) {
        $schema->resultset('Vocabulary')->create(
            {
                record_id => $elt->att('ID'),
                sid       => $language->sid,
                langid    => $elt->att('langid'),
                value     => $elt->att('Value'),
            }
        );
    }

    $t->purge;
}

sub measure {
    my ( $t, $elt ) = @_;

    my $rec = {
        measure_id => $elt->att('ID'),
        sid        => sid(),
        tid        => tid(),
        sign       => $elt->first_child_trimmed_text('Sign'),
    };

    foreach my $elt ( $elt->children('Descriptions') ) {
        foreach my $elt ( $elt->children('Description') ) {

            next unless my $value = $elt->trimmed_text;

            push @{ $rec->{descriptions} },
              {
                tex_id => $elt->att('ID'),
                langid => $elt->att('langid'),
                value  => $value,
                tid    => $rec->{tid},
              };
        }
    }

    foreach my $elt ( $elt->children('Names') ) {
        foreach my $elt ( $elt->children('Name') ) {

            next unless my $value = $elt->trimmed_text;

            push @{ $rec->{names} },
              {
                record_id => $elt->att('ID'),
                langid    => $elt->att('langid'),
                value     => $value,
                sid       => $rec->{sid},
              };
        }
    }

    foreach my $elt ( $elt->children('Signs') ) {
        foreach my $elt ( $elt->children('Sign') ) {

            next unless my $value = $elt->trimmed_text;

            push @{ $rec->{signs} },
              {
                measure_sign_id => $elt->att('ID'),
                langid          => $elt->att('langid'),
                value           => $value,
              };
        }
    }

    $schema->resultset('Measure')->create($rec);

    $t->purge;
}

sub product_family {
    my ( $t, $elt ) = @_;

    my $family_id = $elt->att('ID');

    my $rec = {
        family_id   => $family_id,
        supplier_id => $elt->first_child('Supplier')->att('ID'),
        sid         => sid(),
        tid         => tid(),
        low_pic     => $elt->att('LowPic'),
        thumb_pic   => $elt->att('ThumbPic'),
        catid       => $elt->att('Category_ID'),
    };
    my $product_family = $schema->resultset('ProductFamily')->create($rec);

    if ( my $elt = $elt->first_child('ParentProductFamily') ) {
        my $parent = $elt->att('ID');
        $parents{$family_id} = $parent unless $parent eq "1";
    }

    foreach my $elt ( $elt->children('Description') ) {
        next unless my $value = $elt->att('Value');
        $product_family->create_related(
            'descriptions',
            {
                tex_id => $elt->att('ID'),
                value  => $value,
                langid => $elt->att('langid')
            }
        );
    }

    foreach my $elt ( $elt->children('Name') ) {
        next unless my $value = $elt->att('Value');
        $product_family->create_related(
            'names',
            {
                record_id => $elt->att('ID'),
                value     => $value,
                langid    => $elt->att('langid')
            }
        );
    }

    foreach my $elt ( $elt->children('Series') ) {
        my $series_rec = {
            series_id   => $elt->att('ID'),
            sid         => sid(),
            tid         => tid(),
            supplier_id => $rec->{supplier_id},
            catid       => $rec->{catid},
        };

        my $series =
          $product_family->create_related( 'product_series', $series_rec );

        foreach my $elt ( $elt->children('Description') ) {
            next unless my $value = $elt->att('Value');
            $series->create_related(
                'descriptions',
                {
                    tex_id => $elt->att('ID'),
                    value  => $value,
                    langid => $elt->att('langid')
                }
            );
        }

        foreach my $elt ( $elt->children('Name') ) {
            next unless my $value = $elt->att('Value');
            $series->create_related(
                'names',
                {
                    record_id => $elt->att('ID'),
                    value     => $value,
                    langid    => $elt->att('langid')
                }
            );
        }

    }

    $t->purge;
}

sub supplier {
    my ( $t, $elt ) = @_;

    $schema->resultset('Supplier')->create(
        {
            supplier_id => $elt->att('ID'),
            name        => $elt->att('Name'),
            thumb_pic   => $elt->att('LogoPic'),
            is_sponsor  => $elt->att('Sponsor') ? 'Y' : 'N',
            thumb_pic   => $elt->att('LogoPic'),
        }
    );

    $t->purge;
}
